<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 引入jdbc.properties属性文件 -->
    <context:property-placeholder location="classpath:config/spring-mybatis/jdbc.properties" />
    <!-- 配置数据源 ，dbcp -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!--配置sqlSessionFactory-->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--注意这里：这里是将mybatis的主配置文件读取进来-->
        <property name="configLocation"
                  value="classpath:config/spring-mybatis/mybatis-config.xml" />
        <!--这里如果不需要配置mybatis主配置文件的话也可以通过以下配置 将文件自动扫描-->
        <!--<property name="mapperLocations"
                      value ="classpath:com/xzit/springboot/mapper/*.xml"/>
        -->
    </bean>

    <!--映射器自动代理生成-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 批量扫描的mapper接口所在的包 -->
        <property name="basePackage" value="com.xzit.spring.mapper"/>
        <!-- 注入sqlSessionFactory,注意采用sqlSessionFactoryBeanName -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 注册事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="RuntimeException"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="RuntimeException"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="RuntimeException"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="RuntimeException"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- ensure that the above transactional advice runs for any execution
       of an operation defined by the FooService interface -->
    <aop:config>
        <aop:pointcut id="servicePointcut" expression="execution(* com.xzit.spring.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut"/>
    </aop:config>

</beans>